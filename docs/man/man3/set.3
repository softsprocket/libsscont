.\" Process this file with
.\" groff -man -Tascii set.3
.\"
.TH SET 3 2014.11.01 "" "SoftSprocket libsscont"
.SH NAME
set_create set_get_item set_add_item set_add_items set_all_subsets set_get_item set_union set_intersection set_delete \- generic set operations in C
.SH SYNOPSIS
.nf
.B #include <softsprocket/containers.h>
.sp
.B set* set_create (size_t size, int (*equals) (void*, void*));
.br
.B ssize_t set_get_item_index (set* s, void* item);
.br
.B void* set_get_item (set* s, size_t pos);
.br
.B ssize_t set_add_item (set* s, void* item);
.br
.B ssize_t set_add_items (set* s, void** items, size_t size);
.br
.B set* set_all_subsets (set* s);
.br
.B set* set_union (set* s, set* other);
.br
.B set* set_intersection (set* s, set* other);
.br
.B void set_delete (set* s, void (*delete_item)(void*));
.fi
.sp
Link with \fI\-lsscont\fP.
.sp
.SH DESCRIPTION
These functions provide an interface to a fixed size set container and set operations.
.sp
.br 
set* set_create (size_t size, int (*equals) (void*, void*))  	
.in +4n
.br
size param - the number of pointers it will store.
.br
equals - a function that will be used to determine equality for the set. The set contains unique items based on this equality.
.br
returns - a pointer to a set or NULL if an error occurs
.in
.br
.sp
void set_delete (set* s, void (*delete_item)(void*))
.in +4n
.br		
s - the set to operate on
.br
delete_item - a function to be called on each item. If NULL the programmer must free item memory  		 
.in
.br
.sp
.nf
The structure that is returned by set_create: 
typedef struct {
	size_t size;			// total space available
	size_t count;			// current count
	void** data;			// pointer storage
	int (*equals) (void*, void*);	// saved equality function
} set;
.fi
.br
.sp
ssize_t set_get_item_index (set* s, void* item)
.br
.in +4n
s - a pointer to the set to be operated on
.br
item - the item whose index will be returned
.br
returns - the index of an item or -1 if none is found. 
.br
.in
.sp
ssize_t set_add_item (set* s, void* item)
.br
.in +4n
s - a pointer to the set to be operated on
.br
item - the item to add
.br
returns - the current count or -1 if an error occurs
.br
.in
.sp
ssize_t set_add_items (set* s, void** items, size_t size)
.br
.in +4n
s - a pointer to the set to be operated on
.br
items - the items to be added
.br
size - thenumber of items in the array
.br
returns - the current count or -1 if an error occurs
.br
.in
.sp
void* set_get_item (set* s, size_t pos)
.br
.in +4n
s - a pointer to the set to be operated on
.br
pos - the index of the item
.br
returns - the item at the index or NULL if an error occurs
.in
.sp
set* set_all_subsets (set* s)
.br
.in +4n
s - a pointer to the set to be operated on
.br
returns - a set of all the sets in the set passed as the param or NULL if there's an error. 
Memory for the power set should be reclaimed by calling set_delete with a function pointer that calls set_delete with a NULL function pointer.
i.e.
.nf
void set_deleter (void* v) {
	set_delete (v, NULL);
}
.fi
.in
.sp
set* set_union (set* s, set* other);
.br
.in +4n
s - a set to perform union on
.br
other - a set to perform union on
.br
returns - a set of the union of the two sets. Memory should be reclaimed on the return set
by calling set_delete with a NULL function pointer
.in
.sp
set* set_intersection (set* s, set* other);
.br
.in +4n
s - a set to perform intersection on
.br
other - a set to perform intersection on
.br
returns - a set of the intersection of the two sets. Memory should be reclaimed on the return set
by calling set_delete with a NULL function pointer
.in
.sp    
.sp
.nf
#include "debug_utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <softsprocket/container.h>


int equals (void* this, void* that) {
	int* l = this;
	int* r = that;

	return *l == *r;
}

void dset (void* v) {
	set_delete (v, NULL);
}

int str_equals (void* this, void* that) {
	return strcmp (this, that) == 0;
}

int set_test () {
	
	set* s = set_create (3, equals);
	if (s == NULL) {
		PMSG ("set_create returned NULL");
		exit (EXIT_FAILURE);
	}
	
	if (s->size != 3) {
		PMSG ("set initialization: wrong size value");
		return EXIT_FAILURE;
	}

	if (s->count != 0) {
		PMSG ("set initialization: wrong count value");
		return EXIT_FAILURE;
	}

	int pi = 2;
	ssize_t ii = set_get_item_index (s, &pi);

	if (ii != -1) {
		PDEC ();
		fprintf (stderr, "set_get_item_index: %lu != -1\\n", ii);
		return EXIT_FAILURE;
	}

	for (int i= 1; i < 4; ++i) {
		int* ip = malloc (sizeof (int));
		if (ip == NULL) {
			PERR ("malloc");
			exit (EXIT_FAILURE);
		}

		*ip = i;

		ssize_t c = 0;
		if ((c = set_add_item (s, ip)) != i) {
			PDEC ();
			fprintf (stderr, "set_add_item returned %lu, not %d\\n", c, i);
			return EXIT_FAILURE;		
		}
	}

	if (s->count != 3) {
		PDEC ();
		fprintf (stderr, "set_add_item: count %lu != 3\\n", s->count);
		return EXIT_FAILURE;
	}

	int* ip = set_get_item (s, 1);
	ssize_t item_index = set_get_item_index (s, ip);

	if (item_index != 1) {
		PDEC ();
		fprintf (stderr, "set_get_item_index: %lu != 1\\n", item_index);
		return EXIT_FAILURE;
	}

	set* all = set_all_subsets (s);
	if (all == NULL) {
		PMSG ("set_all_subsets returned NULL\\n");
		return EXIT_FAILURE;
	}

	if (all->count != 8) {
		PDEC ();
		fprintf (stderr, "set_all_subsets count %lu != 8\\n", all->count);
		return EXIT_FAILURE;
	}

	int setof[8][3] = {
		{ },
		{ 1 },
		{ 2 },
		{ 1, 2 },
               	{ 3 },
		{ 1, 3 },
		{ 2, 3 },
		{ 1, 2, 3 }
	};

	for (int i = 0; i < all->count; ++i) {
		set* n = set_get_item (all, i);
		for (int j = 0; j < n->count; ++j) {
			int* item = set_get_item (n, j);
			if (*item != setof [i][j]) {
				PDEC ();
				fprintf (stderr, "set_all_subsets: %d != %d\\n", *item, setof [i][j]);
				return EXIT_FAILURE;
			}
		}

	}

	set_delete (all, dset);
	set_delete (s, free);

	char* nums[5] = {
		"one", "two", "three", "four", "five"
	};

	set* str_set = set_create (5, str_equals);
	if (str_set == NULL) {
		PMSG ("set_create returned NULL");
		return EXIT_FAILURE;
	}

	ssize_t rc = set_add_items (str_set, (void**) nums, 5);
	if (rc != 5) {
		PDEC ();
		fprintf (stderr, "set_add_items: returned %lu != 5\\n", rc);
		return EXIT_FAILURE;
	}


	for (int i = 0; i < str_set->count; ++i) {
		char* sss = set_get_item (str_set, i);
		char* sn = nums[i];
		if (strcmp (sss, sn) != 0) {
			PDEC ();
			fprintf (stderr, "set_add_items: %s != %s\\n", sss, sn);
		       	return EXIT_FAILURE;	
		}
	}

	char* nums2[4] = {
		"three", "five", "seven", "nine"
	};

	set* str2_set = set_create (4, str_equals);
	if (str2_set == NULL) {
		PMSG ("set_create returned NULL");
		return EXIT_FAILURE;
	}

	if (set_add_items (str2_set, (void**) nums2, 4) == -1) {
		PMSG ("set_add_items return -1");
		return EXIT_FAILURE;
	}
	
	set* uni = set_union (str_set, str2_set);
	if (uni == NULL) {
		PMSG ("set_union returned NULL");
		return EXIT_FAILURE;
	}

	char* exp_uni[7] = {
		"one", "two", "three", "four", "five", "seven", "nine"
	};

	for (int i = 0; i < uni->count; ++i) {
		char* it = set_get_item (uni, i);
		char* xit = exp_uni[i];
		if (strcmp (it, xit) != 0) {
			PDEC ();
			fprintf (stderr, "set_union: %s != %s\\n", it, xit);
			return EXIT_FAILURE;
		}
	}

	set_delete (uni, NULL);

	set* inter = set_intersection (str_set, str2_set);
	if (inter == NULL) {
		PMSG ("set_intersection return NULL");
		return EXIT_FAILURE;
	}

	char* exp_inter[4] = {
		"three", "five", "seven", "nine"
	};

	for (int i = 0; i < inter->count; ++i) {
		char* is = set_get_item (inter, i);
		char* exi = exp_inter[i];
		if (strcmp (is, exi) != 0) {
			PDEC ();
			fprintf (stderr, "set_intersection: %s != %s\\n", is, exi);
			return EXIT_FAILURE;
		}
	}

	set_delete (inter, NULL);
	set_delete (str_set, NULL);
	set_delete (str2_set, NULL);


	printf ("set tests pass\\n");

	return EXIT_SUCCESS;
}

.fi
.SH BUGS
No known bugs.
.SH AUTHOR
Greg Martin <greg@softsprocket.com>
.SH "SEE ALSO"
.BR auto_array (3),
.BR hash_table (3),
.BR auto_string (3)


